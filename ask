#!/bin/env bash
# TODO: work in non interactive shell when in graphical environment through dmenu and notify-send
# [[ $- != *i* ]] || exit 1

# check flags
dohelp=false; nodefault=false;
while true; do
    case "$1" in
        -h|--help) dohelp=true; shift;;
        -n|--nodefault) nodefault=true; shift;;
        # --) shift; break;;
        *) break;;
    esac
done

# TODO: 
# function that formats help 
#   no indent = bold highlighting
#   highlight arguments i.e. <thing> (thing) [thing] 
#   >= 2 indents; more than 5 unwrapped space seperated words = wrap between terminal width and indent height

# vars
msg=${1:-"confirm?[Y/n]: "}
default="${2:-yes}"




main() {
    # handle help
    if $dohelp; then
        print-usage && exit 0
    fi

    # prompt
    # possibly useful arguments: --prompt.foreground="" --placeholder.foreground="240" --value="$default" --timeout=0s
    answer="$(gum input \
        --placeholder=""       \
        --prompt="$msg"        \
        --cursor.mode="static" \
        --no-show-help         \
        --strip-ansi           \
        --cursor.foreground="14" \
    )"; [[ $? != 0 ]] && exit 1

    # handle no default
    if ! $nodefault; then
        [[ $answer == "" ]] && answer=$default
    fi

    echo $answer
    exit 0
}




# definitions
print-usage() {
    cat << EOF
A simple prompt to get user input

usage: ask [options] <prompt> <default answer> <other answers>...

        <prompt>, <default answer> and <other answers> are optional and will prompt \"confirm?[Y/n]: \" and default to \"yes\" and \"no\" if not supplied.

options:
    -h, --help         
        for this message.
    -n, --no-as-default 
        default  to no and supply yes as other
    -d, --nodefault
        dont default to <default answer> if answer is empty.

!!! unimplemented options !!!:
    -e, --noescape     
        dont exit application on escape.
    -c, --compare
        take argument as input and return regex matching the first letter and the word in completion.
        default to yes
    
EOF
}

# call the main loop
main "$@"
