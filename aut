#!/bin/env bash
[[ $- != *i* ]]; mode=$?

# check for flags
remove=false; backup=false; 
while true; do 
    case "$1" in 
        -b) backup=true; shift;;
        -R) remove=true; shift;;
        # --) shift; break;;
        *) break;;
    esac
done

# TODO:
# git
#   Check if file is tracked
#     git ls-files --error-unmatch "$file" > /dev/null 2>&1; then
#   or renamed from tracked
#     git diff --name-status --diff-filter=R | awk '{print $3}' | grep -Fxq "$file"; then

# main declaration
main() {
    # vars
    script="$1"
    dir=${2:-$HOME/bin}
    #
    final="$dir/$script"




    # handle removal
    if $remove; then
        [[ ! -f $final ]] \
            && echo $script not found in $(tildafy $dir). && abort 1

        if askn "delete $script?[y/N]: "; then
            if [[ `ask -d "enter \"$script\" to delete: "` == $script ]]; then
                echo deleting $final
                rm $final
                exit 0
            fi

            echo script did not match input
            abort 2
        fi

        abort 3
    fi

    if $backup; then
        # git -C $HOME/bin commit -m "changes"
        # git -C $HOME/bin push
    fi

    # check for $script
    [[ -z $script ]] \
        && echo "no supplied script name" && abort 1

    # check if $script is a dir
    [[ -d $final ]] \
        && echo "$script is not a file" && abort 2

    # make sure $script exists
    if [[ ! -e $final ]]; then
        echo "$script doesnt exist..."

        ! asky "create $(tidafy $dir)/$script?[Y/n]: " \
            && abort 3

        touch $final
        chmod +x $final
        echo -e "#!/bin/env bash\n" > $final
        
        [[ $dir == "$HOME/bin" ]] \
            && asky "add $script" && git -C  add $final
    fi

    # make sure $script is executable
    if [[ ! $(stat -c "%A" $final) =~ "x" ]]; then
        echo $script is not executable
        asky "make executable?[Y/n]" \
            && chmod +x $final || abort 4
    fi

    # choose what to do 
    # check shell interactivity
    if [[ $mode = 0 ]]; then
        ${EDITOR:-vi} $final; exit 0

        # check if graphical session
    elif [[ $(tset -q) == alacritty ]]; then 
        ${VISUAL:-alacritty -e ${EDITOR:-vi}} $final; exit 0

    # exit otherwise
    else 
        echo your platform is not supported by aut.
        abort 130
    fi
}




# definitions 
abort() {
    [[ -z $1 ]] || echo no exit code supplied && exit 1337
    echo 
    echo aborting...
    exit $1
}

yes="^[Yy][Ee]?[Ss]?$"
asky() { [[ `ask $1` =~ $yes ]] || exit 0 }
askn() { [[ `ask $1 no` =~ $yes ]] || exit 0 }

aware-echo() {
    [[ ! -z $1 ]]; supplied=$?

    if [[ $supplied > 0 ]]; then 
        if [[ $mode == 0 ]]; then
            echo $@
        elif [[ `tset -q` == alacritty ]]; then
            notify-send $@
        fi
    else
        echo
    fi
}

tildafy() { echo ${1/#$HOME/~} }


# main callecho "$HOME/cheese" | while read -r input; do
  echo "${input/#$HOME/~}"
done
main
